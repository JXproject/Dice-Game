/*********************************************************************
Programer:                  Jack Xu
Name:                      Dice Game
Unit:                       Unit  3
Assignment:            Major Assignment
			   Dice Game
			Price is right

Date:                      23/04/2015

Comments:
  This program will provide a game to let player try to roll a dice and guess
if the car price generated by computer is higher or lower than the number the
player rolled. If all guess or the same numbers, the player win.
  This game is based on dice game in pice is right!!!!!!!
  This program provide hints whille entering wrong answer format.
*********************************************************************/

// The "Dicegame" class.
import java.applet.*; // applet structure import
import java.awt.*;
import java.io.*; // sound structure import
import java.net.*; // sound structure import
import hsa.Console;

public class Dicegame
{
    static Console c; // The main output console
    static Console x; // The seperate cheque output console
    public static void main (String[] args)
    {
	c = new Console (30, 100); //Console statements and set the size
	Load (); //Loading Animation && Be patient
	Cover (); //It is actually the whole program//The game method is inside the game

    }


    /***************************************************************
    ****************************************************************
    ********************Method**************************************/

    /****************This method will provide sound of applaud while the
    player win, but only sound method but not decision method*************/
    public static void WinSound ()
    {
	File soundFile = new File ("applaud.wav");
	AudioClip theSound = null;
	try
	{
	    theSound = Applet.newAudioClip (soundFile.toURL ()); //Input Sound file
	}
	catch (MalformedURLException e)
	{
	    System.out.println (e);
	}

	// Play the audio clip...
	theSound.play (); //play the sound

    }



    /*****This method will provide sound of dice rolling while the player rolls, but
       only sound method but not decision method****(Low volume, hard to hear)*********/

    public static void DiceSound ()
    {
	File soundFile = new File ("Dice.wav");
	AudioClip theSound = null;
	try
	{
	    theSound = Applet.newAudioClip (soundFile.toURL ()); //Input Sound file
	}
	catch (MalformedURLException e)
	{
	    System.out.println (e);
	}

	// Play the audio clip...
	theSound.play (); //play the sound

    }


    /*****This method will provide sound of losing game while the player  lose, but
       only sound method but not decision method*************/

    public static void LoseSound ()
    {
	File soundFile = new File ("lose.wav");
	AudioClip theSound = null;
	try
	{
	    theSound = Applet.newAudioClip (soundFile.toURL ()); //input the sound file
	}
	catch (MalformedURLException e)
	{
	    System.out.println (e);
	}

	// Play the audio clip...
	theSound.play ();

    }


    /********************************************************************
    Random Hints, quotes, or secrete while waiting for loading animation
    It helps player to be more patient to waiting the loading period.
    ********************************************************************/
    public static void RandomHintInLoad ()
    {
	DiceSound ();
	int a = (int) (Math.random () * 8); //random value INT
	Font Quote = new Font ("Times New Roman", Font.PLAIN, 13);
	c.setFont (Quote);
	switch (a) //Choose quotes when values random generated!
	{
	    case 0:
		{
		    c.drawString ("**Hint: Do you know all the single letters after a choice is a choice to next method!!", 160, 580);
		    break;
		}
	    case 1:
		{
		    c.drawString ("**Chats: Do you know this program is made by Jack Xu and for a long times!!", 160, 580);
		    break;
		}
	    case 2:
		{
		    c.drawString ("**Secrete: Do you know that the programer redid someparts, for unsaved closed. LOL!!", 160, 580);
		    break;
		}
	    case 3:
		{
		    c.drawString ("**Hint: 'p' = play ;  'q' = quit ; 'm' = menu (There are first capital letter)!!", 160, 580);
		    break;
		}
	    case 4:
		{
		    c.drawString ("**Hint: 'n' = next page ;  'b' = back to previous page (There are first capital letter)!!", 160, 580);
		    break;
		}
	    case 5:
		{
		    c.drawString ("**Chats: This program is ran all the programmer's spare time and after school time!!", 160, 580);
		    break;
		}
	    case 6:
		{
		    c.drawString ("**Secrete: This game is based on Price Is Right (AHHH, I wanna win price of the true game)!!", 160, 580);
		    break;
		}
	    case 7:
		{
		    c.drawString ("**Drew Carey: Welcome to The Price is Right! Happiest place on earth! Look at this place! Fantastic!", 160, 580);
		    break; //Quote from Price is right
		}
	}

    }


    /************************************************************************************************
    *This method shows the Loading part of animation!!
    ****************************************************************************/
    public static void Load ()
    {
	int a = 40 + 150;                                       //set x-value Right places of the Title
	int b = 120;                                            //set y-value Right places of the Title
	Font Title = new Font ("Showcard Gothic", Font.PLAIN, 90);
	c.setFont (Title);                                      //Font for Titles
	c.drawRoundRect (20 + a, 20 + b, 90, 90, 10, 10);       //Title blocks
	c.drawString ("D", 35 + a, 100 + b);                    //String Title "D"
	c.drawRoundRect (120 + a, 20 + b + 50, 90, 90, 10, 10); //Title blocks
	c.drawString ("I", 150 + a, 100 + b + 50);              //String Title "I"
	c.drawRoundRect (220 + a, 20 + b, 90, 90, 10, 10);      //Title blocks
	c.drawString ("C", 235 + a, 100 + b);                   //String Title "C"
	c.drawRoundRect (320 + a, 20 + b + 50, 90, 90, 10, 10); //Title blocks
	c.drawString ("E", 340 + a, 100 + b + 50);              //String Title "E"
	RandomHintInLoad ();                                    //Here, use the loading hint random input method to show user friendly
	Font Titleq = new Font ("Colonna MT", Font.PLAIN, 90);
	c.setFont (Titleq);                                     //Set Title "Game" font
	c.drawString ("GAME", 70 + a, b + 300);                 //Draw String "Game"

	Color background = new Color (255, 128, 128);
	c.drawRect (160, 500, 500, 50);                         //draw Loading bar
	c.setColor (background);                                //set Loading bar color

	Font load = new Font ("Times New Roman", Font.PLAIN, 60); //give Font format for 'load' Font
	c.setFont (load);                                       //State Font for the loading number, (like 1%, 2%, ...)
	int w = 500;                                            //The max wide size of loading bar
	for (int i = 0 ; i < w ; i++)                           //For loop for changing loading bar size to show increasing animation and change loading values
	{
	    c.setColor (background);
	    c.fillRect (161, 501, i, 48);                       //Loading bar
	    c.drawString ((1 + i / 5) + "" + "%", 670, 550);    //Loading percent from 1%to100%
	    delay (0.007);                                      //Delay for slowing down
	    c.setColor (Color.white);
	    c.fillRect (665, 500, 135, 60);                     //to cover the previous value shown on the loading panel

	}
	c.setColor (background);
	c.drawString ("100%", 670, 550);                        //Final state of 100% after finishing loop
    }


    /***************************************************************************
	    //Delay method to help to complete other statements' action
    **************************************************************************/
    public static void delay (double seconds)  // Delay Method
    {
	int millisecs = (int) (seconds * 1000);
	try
	{
	    Thread.currentThread ().sleep (millisecs);
	}


	catch (InterruptedException e)
	{
	}
    }


    /***************************************************************************
    ***************Twinkle Lucky Yellow Light method**************************
    When player roll the same number as the computer generated number, the side bar
    frame surround the computer number will twinkle
    **************************************************************************/
    public static void Lucky (int x)
    {
	int num = 10;
	for (int i = 0 ; i < num ; i++)                                                 //Action for 10 times
	{
	    c.setColor (Color.white);                                                   //Switch or changing color to show the hint importance
	    c.drawRoundRect (278 + 100 * x, 393 + 85, 65, 65, 10, 10);
	    c.drawRoundRect (279 + 100 * x, 394 + 85, 63, 63, 10, 10);
	    c.drawRoundRect (278 + 100 * x + 2, 393 + 2 + 85, 65 - 4, 65 - 4, 10, 10);
	    c.drawRoundRect (278 + 100 * x, 393 - 85, 65, 65, 10, 10);
	    c.drawRoundRect (279 + 100 * x, 394 - 85, 63, 63, 10, 10);
	    c.drawRoundRect (278 + 2 + 100 * x, 393 + 2 - 85, 65 - 4, 65 - 4, 10, 10);
	    delay (0.1);                                                                //Each Action delay 0.1 seconds to form twinkle action
	    c.setColor (Color.yellow);                                                  //Switch or changing color to show the hint importance
	    c.drawRoundRect (278 + 100 * x, 393 + 85, 65, 65, 10, 10);
	    c.drawRoundRect (279 + 100 * x, 394 + 85, 63, 63, 10, 10);
	    c.drawRoundRect (278 + 100 * x + 2, 393 + 2 + 85, 65 - 4, 65 - 4, 10, 10);
	    c.drawRoundRect (278 + 100 * x, 393 - 85, 65, 65, 10, 10);
	    c.drawRoundRect (279 + 100 * x, 394 - 85, 63, 63, 10, 10);
	    c.drawRoundRect (278 + 100 * x + 2, 393 + 2 - 85, 65 - 4, 65 - 4, 10, 10);
	    delay (0.1);                                                               //Each Action delay 0.1 seconds to form twinkle action
	}
    }


    /***************************************************************************
    ***************Twinkle Hint & Hint method**************************
    This will pop up when player enter anything except "higher" or "lower", this statement
    will pop up and twinkle and in another body loop method to ask player to reenter!!!!
			    Player Friendly
    **************************************************************************/
    public static void Hintingame ()
    {
	Color background1 = new Color (255, 128, 128);
	c.setTextBackgroundColor (background1);
	c.setTextColor (Color.white);
	c.setCursor (14, 5);
	c.print ("*Please enter 'higher' (or 'lower') to represent car price higher (or lower) than dice number.");   //HINT INFORMATION
	int w = 3;                                                                                                    //twinkle time
	for (int i = 0 ; i < w ; i++)                                                                                   // For loop to complete twinkle action
	{
	    c.setTextColor (background1);                                                                               //Change text color to show thw twinkle effect
	    c.setCursor (14, 5);                                                                                        //Set where the follow comments appears
	    c.print ("*Please enter 'higher' (or 'lower') to represent car price higher (or lower) than dice number."); //HINT INFORMATION
	    delay (0.5);                                                                                                //delay
	    c.setTextColor (Color.white);                                                                               //Change text color to show thw twinkle effect
	    c.setCursor (14, 5);                                                                                        //Set where the follow comments appears
	    c.print ("*Please enter 'higher' (or 'lower') to represent car price higher (or lower) than dice number."); //HINT INFORMATION
	    delay (0.5);                                                                                                //delay
	}
    }


    /*************************************************************************************************
			       Method to Show Carprice(computer generated) in different case(Num 1,2,3,4,5,6)
		       This method will draw the Number shape that computer generated
		       To form the illusion of the Carprice number.
    **************************************************************************************************/

    public static void CarPrice (int x, int y, int CarPrice)  //State the dice place and number of the car price generated
    {
	switch (CarPrice)
	{
	    case 1:                                         //when car price in that digit place is 1
		{
		    c.setColor (Color.white);
		    c.fillRect (308 + x, 322 + y, 5, 35);
		    break;
		}
		//2
	    case 2:                                         //when car price in that digit place is 2
		{
		    c.setColor (Color.white);
		    c.fillRect (295 + x, 322 + y, 25, 5);
		    c.fillRect (320 + x, 322 + y, 5, 20);
		    c.fillRect (295 + x, 337 + y, 25, 5);
		    c.fillRect (295 + x, 337 + y, 5, 20);
		    c.fillRect (300 + x, 352 + y, 25, 5);
		    break;
		}
		//3
	    case 3:                                         //when car price in that digit place is 3
		{
		    c.setColor (Color.white);
		    c.fillRect (295 + x, 322 + y, 25, 5);
		    c.fillRect (320 + x, 322 + y, 5, 20);
		    c.fillRect (295 + x, 337 + y, 25, 5);
		    c.fillRect (320 + x, 337 + y, 5, 20);
		    c.fillRect (295 + x, 352 + y, 25, 5);
		    break;
		}
		//4
	    case 4:                                         //when car price in that digit place is 4
		{
		    c.setColor (Color.white);
		    c.fillRect (320 + x, 322 + y, 5, 20);
		    c.fillRect (295 + x, 337 + y, 25, 5);
		    c.fillRect (295 + x, 322 + y, 5, 20);
		    c.fillRect (320 + x, 337 + y, 5, 20);
		    break;
		}
		//5
	    case 5:                                         //when car price in that digit place is 5
		{
		    c.setColor (Color.white);
		    c.fillRect (295 + x, 322 + y, 25, 5);
		    c.fillRect (295 + x, 322 + y, 5, 20);
		    c.fillRect (295 + x, 337 + y, 25, 5);
		    c.fillRect (320 + x, 337 + y, 5, 20);
		    c.fillRect (295 + x, 352 + y, 25, 5);
		    break;
		}
	    case 6:                                         //when car price in that digit place is 6
		{
		    c.setColor (Color.white);
		    c.fillRect (295 + x, 322 + y, 25, 5);
		    c.fillRect (295 + x, 322 + y, 5, 20);
		    c.fillRect (295 + x, 337 + y, 25, 5);
		    c.fillRect (320 + x, 337 + y, 5, 20);
		    c.fillRect (295 + x, 352 + y, 25, 5);
		    c.fillRect (295 + x, 337 + y, 5, 20);
		    break;
		}
	}
    }


    /*************************************************************************************************
			       Method to draw Dice in different case(Num 1,2,3,4,5,6)
		       This method will draw the dice shape that you rolled
		       To form the illusion of the dice when you rolled.
    **************************************************************************************************/

    public static void drawDice (int x, int y, int RollNum)
    {
	Color DiceRed = new Color (255, 85, 85);
	Color DiceShadow = new Color (209, 209, 209);
	Color DiceShadowD = new Color (188, 188, 188);
	switch (RollNum)
	{
		//When dice rolls 1
	    case 1:
		{
		    c.setColor (DiceShadow);
		    c.fillRoundRect (x, y, 53, 53, 15, 15);
		    c.setColor (Color.white);
		    c.fillRoundRect (x, y, 50, 50, 15, 15);
		    c.setColor (DiceShadowD);
		    c.drawRoundRect (x, y, 50, 50, 15, 15);
		    c.setColor (DiceRed);
		    c.fillOval (x + 20, y + 20, 10, 10);
		    c.setColor (Color.white);
		    c.drawArc (x + 18, y + 19, 10, 10, 290, 60);
		    break;
		}

		//When dice rolls 2
	    case 2:
		{
		    c.setColor (DiceShadow);
		    c.fillRoundRect (x, y, 53, 53, 15, 15);
		    c.setColor (Color.white);
		    c.fillRoundRect (x, y, 50, 50, 15, 15);
		    c.setColor (DiceShadowD);
		    c.drawRoundRect (x, y, 50, 50, 15, 15);
		    c.setColor (DiceRed);
		    c.fillOval (x + 10, y + 10, 10, 10);
		    c.fillOval (x + 30, y + 30, 10, 10);
		    c.setColor (Color.white);
		    c.drawArc (x + 8, y + 9, 10, 10, 290, 60);
		    c.drawArc (x + 28, y + 29, 10, 10, 290, 60);
		    break;
		}

		//When dice rolls 3
	    case 3:
		{
		    c.setColor (DiceShadow);
		    c.fillRoundRect (x, y, 53, 53, 15, 15);
		    c.setColor (Color.white);
		    c.fillRoundRect (x, y, 50, 50, 15, 15);
		    c.setColor (DiceShadowD);
		    c.drawRoundRect (x, y, 50, 50, 15, 15);
		    c.setColor (DiceRed);
		    c.fillOval (x + 32, y + 8, 10, 10);
		    c.fillOval (x + 8, y + 32, 10, 10);
		    c.fillOval (x + 20, y + 20, 10, 10);
		    c.setColor (Color.white);
		    c.drawArc (x + 30, y + 7, 10, 10, 290, 60);
		    c.drawArc (x + 6, y + 31, 10, 10, 290, 60);
		    c.drawArc (x + 18, y + 19, 10, 10, 290, 60);
		    break;
		}

		//When dice rolls 4
	    case 4:
		{
		    c.setColor (DiceShadow);
		    c.fillRoundRect (x, y, 53, 53, 15, 15);
		    c.setColor (Color.white);
		    c.fillRoundRect (x, y, 50, 50, 15, 15);
		    c.setColor (DiceShadowD);
		    c.drawRoundRect (x, y, 50, 50, 15, 15);
		    c.setColor (DiceRed);
		    c.fillOval (x + 32, y + 8, 10, 10);
		    c.fillOval (x + 8, y + 32, 10, 10);
		    c.fillOval (x + 32, y + 32, 10, 10);
		    c.fillOval (x + 8, y + 8, 10, 10);
		    c.setColor (Color.white);
		    c.drawArc (x + 30, y + 7, 10, 10, 290, 60);
		    c.drawArc (x + 6, y + 31, 10, 10, 290, 60);
		    c.drawArc (x + 30, y + 31, 10, 10, 290, 60);
		    c.drawArc (x + 6, y + 7, 10, 10, 290, 60);
		    break;
		}

		//When dice rolls 5
	    case 5:
		{
		    c.setColor (DiceShadow);
		    c.fillRoundRect (x, y, 53, 53, 15, 15);
		    c.setColor (Color.white);
		    c.fillRoundRect (x, y, 50, 50, 15, 15);
		    c.setColor (DiceShadowD);
		    c.drawRoundRect (x, y, 50, 50, 15, 15);
		    c.setColor (DiceRed);
		    c.fillOval (x + 32, y + 8, 10, 10);
		    c.fillOval (x + 8, y + 32, 10, 10);
		    c.fillOval (x + 32, y + 32, 10, 10);
		    c.fillOval (x + 8, y + 8, 10, 10);
		    c.fillOval (x + 20, y + 20, 10, 10);
		    c.setColor (Color.white);
		    c.drawArc (x + 30, y + 7, 10, 10, 290, 60);
		    c.drawArc (x + 6, y + 31, 10, 10, 290, 60);
		    c.drawArc (x + 30, y + 31, 10, 10, 290, 60);
		    c.drawArc (x + 6, y + 7, 10, 10, 290, 60);
		    c.drawArc (x + 18, y + 19, 10, 10, 290, 60);
		    break;
		}

		//When dice rolls 6
	    case 6:
		{
		    c.setColor (DiceShadow);
		    c.fillRoundRect (x, y, 53, 53, 15, 15);
		    c.setColor (Color.white);
		    c.fillRoundRect (x, y, 50, 50, 15, 15);
		    c.setColor (DiceShadowD);
		    c.drawRoundRect (x, y, 50, 50, 15, 15);
		    c.setColor (DiceRed);
		    c.fillOval (x + 32, y + 8, 10, 10);
		    c.fillOval (x + 8, y + 32, 10, 10);
		    c.fillOval (x + 32, y + 32, 10, 10);
		    c.fillOval (x + 8, y + 8, 10, 10);
		    c.fillOval (x + 8, y + 20, 10, 10);
		    c.fillOval (x + 32, y + 20, 10, 10);
		    c.setColor (Color.white);
		    c.drawArc (x + 30, y + 7, 10, 10, 290, 60);
		    c.drawArc (x + 6, y + 31, 10, 10, 290, 60);
		    c.drawArc (x + 30, y + 31, 10, 10, 290, 60);
		    c.drawArc (x + 6, y + 7, 10, 10, 290, 60);
		    c.drawArc (x + 6, y + 19, 10, 10, 290, 60);
		    c.drawArc (x + 30, y + 19, 10, 10, 290, 60);
		    break;
		}
	}

    }


    /*******************************************************************************
		    the method to draw Higher or Lower statements
		    which the player entered.
		    'H'is higher
		    'L'is lower
		    Marks
    *******************************************************************************/

    public static void drawHL (int x, String Decide)
    {
	c.setColor (Color.white);
	Font Decision = new Font ("Castellar", Font.PLAIN, 50);
	if (Decide.toUpperCase ().equals ("HIGHER"))            //State when 'higher' is typed or entered by user, run follow states in curl brackets
	{
	    c.setFont (Decision);
	    c.drawString ("H", 289 + 100 * (x - 1), 357);      //'H'
	}
	else if (Decide.toUpperCase ().equals ("LOWER"))       //State when 'lower' is typed or entered by user, run follow states in curl brackets
	{
	    c.setFont (Decision);
	    c.drawString ("L", 296 + 100 * (x - 1), 357 + 85 + 85); //'L'
	}
    }




    /***********************************************************************************
			       Dicebackground Illusion
		  This fancy code structutred the dice background
		  during games.
		  This method shows the background of the gaming area panel in
		  games
    *************************************************************************************/

    public static void Diceback ()
    {
	Color backgroundD = new Color (255, 206, 206);
	//bottom carprice panel
	c.setColor (backgroundD);
	c.drawRoundRect (273, 388, 375, 75, 10, 10);
	c.drawRoundRect (272, 387, 377, 77, 10, 10);
	c.setColor (backgroundD);
	c.fillRoundRect (278, 393 + 85, 65, 65, 10, 10);
	c.setColor (Color.black);
	c.fillRoundRect (281, 396 + 85, 60, 60, 10, 10);
	c.setColor (backgroundD);
	c.fillRoundRect (263 + 90 + 25, 393 + 85, 65, 65, 10, 10);
	c.setColor (Color.black);
	c.fillRoundRect (266 + 90 + 25, 396 + 85, 60, 60, 10, 10);
	c.setColor (backgroundD);
	c.fillRoundRect (333 + 120 + 25, 393 + 85, 65, 65, 10, 10);
	c.setColor (Color.black);
	c.fillRoundRect (336 + 120 + 25, 396 + 85, 60, 60, 10, 10);
	c.setColor (backgroundD);
	c.fillRoundRect (403 + 150 + 25, 393 + 85, 65, 65, 10, 10);
	c.setColor (Color.black);
	c.fillRoundRect (406 + 150 + 25, 396 + 85, 60, 60, 10, 10);
	//top carprice panel
	c.setColor (backgroundD);
	c.fillRoundRect (278, 393 - 85, 65, 65, 10, 10);
	c.setColor (Color.black);
	c.fillRoundRect (281, 396 - 85, 60, 60, 10, 10);
	c.setColor (backgroundD);
	c.fillRoundRect (263 + 90 + 25, 393 - 85, 65, 65, 10, 10);
	c.setColor (Color.black);
	c.fillRoundRect (266 + 90 + 25, 396 - 85, 60, 60, 10, 10);
	c.setColor (backgroundD);
	c.fillRoundRect (333 + 120 + 25, 393 - 85, 65, 65, 10, 10);
	c.setColor (Color.black);
	c.fillRoundRect (336 + 120 + 25, 396 - 85, 60, 60, 10, 10);
	c.setColor (backgroundD);
	c.fillRoundRect (403 + 150 + 25, 393 - 85, 65, 65, 10, 10);
	c.setColor (Color.black);
	c.fillRoundRect (406 + 150 + 25, 396 - 85, 60, 60, 10, 10);
	//first digit of carprice
	c.setColor (Color.yellow);
	c.fillRoundRect (133 + 20, 393, 65, 65, 10, 10);
	c.setColor (Color.black);
	c.fillRoundRect (136 + 20, 396, 60, 60, 10, 10);
	//roll num panel
	c.setColor (backgroundD);
	c.fillRoundRect (193 + 60 + 25, 393, 65, 65, 10, 10);
	c.setColor (backgroundD);
	c.fillRoundRect (263 + 90 + 25, 393, 65, 65, 10, 10);
	c.setColor (backgroundD);
	c.fillRoundRect (333 + 120 + 25, 393, 65, 65, 10, 10);
	c.setColor (backgroundD);
	c.fillRoundRect (403 + 150 + 25, 393, 65, 65, 10, 10);
	c.setColor (Color.black);
	c.fillRoundRect (196 + 60 + 25, 396, 60, 60, 10, 10);
	c.setColor (Color.black);
	c.fillRoundRect (266 + 90 + 25, 396, 60, 60, 10, 10);
	c.setColor (Color.black);
	c.fillRoundRect (336 + 120 + 25, 396, 60, 60, 10, 10);
	c.setColor (Color.black);
	c.fillRoundRect (406 + 150 + 25, 396, 60, 60, 10, 10);
    }


    /******************************************************************************
			    This method show the pop up panel
			      when finishing games
	This make the background lighter to show the illusion of transparency
    *********************************************************************************/
    public static void Pompup ()
    {
	//Color Statement declare
	Color background1 = new Color (255, 150, 150);
	Color backgroundD1 = new Color (255, 206, 206);
	Color Textbackground1 = new Color (154 + 22, 154 + 22, 154 + 22);
	Color grey = new Color (89, 89, 89);
	//lighter background
	c.setColor (background1);
	c.fillRect (15, 15, 788, 680);
	c.setTextBackgroundColor (Textbackground1);
	c.setColor (Textbackground1);
	c.fillRect (150, 50, 500, 200);
	c.setColor (Color.white);
	c.drawRoundRect (145, 300, 130 + 380, 85 * 3 - 5, 10, 10);
	c.drawRoundRect (145 - 1, 300 - 1, 130 + 380 + 2, 85 * 3 + 2 - 5, 10, 10);

	//lighter background
	c.setColor (backgroundD1);
	c.drawRoundRect (273, 388, 375, 75, 10, 10);
	c.drawRoundRect (272, 387, 377, 77, 10, 10);

	//lighter bottom carprice
	c.setColor (backgroundD1);
	c.fillRoundRect (278, 393 + 85, 65, 65, 10, 10);

	c.setColor (backgroundD1);
	c.fillRoundRect (263 + 90 + 25, 393 + 85, 65, 65, 10, 10);

	c.setColor (backgroundD1);
	c.fillRoundRect (333 + 120 + 25, 393 + 85, 65, 65, 10, 10);

	c.setColor (backgroundD1);
	c.fillRoundRect (403 + 150 + 25, 393 + 85, 65, 65, 10, 10);

	c.setColor (grey);
	c.fillRoundRect (281, 396 - 85, 60, 60, 10, 10);
	c.setColor (grey);
	c.fillRoundRect (281, 396 + 85, 60, 60, 10, 10);

	c.setColor (grey);
	c.fillRoundRect (266 + 90 + 25, 396 - 85, 60, 60, 10, 10);
	c.setColor (grey);
	c.fillRoundRect (266 + 90 + 25, 396 + 85, 60, 60, 10, 10);

	c.setColor (grey);
	c.fillRoundRect (336 + 120 + 25, 396 - 85, 60, 60, 10, 10);
	c.setColor (grey);
	c.fillRoundRect (336 + 120 + 25, 396 + 85, 60, 60, 10, 10);

	c.setColor (grey);
	c.fillRoundRect (406 + 150 + 25, 396 - 85, 60, 60, 10, 10);
	c.setColor (grey);
	c.fillRoundRect (406 + 150 + 25, 396 + 85, 60, 60, 10, 10);
	//lighter top carprice
	c.setColor (backgroundD1);
	c.fillRoundRect (278, 393 - 85, 65, 65, 10, 10);

	c.setColor (backgroundD1);
	c.fillRoundRect (263 + 90 + 25, 393 - 85, 65, 65, 10, 10);

	c.setColor (backgroundD1);
	c.fillRoundRect (333 + 120 + 25, 393 - 85, 65, 65, 10, 10);

	c.setColor (backgroundD1);
	c.fillRoundRect (403 + 150 + 25, 393 - 85, 65, 65, 10, 10);

	//lighter first digit of carprice
	c.setColor (backgroundD1);
	c.fillRoundRect (133 + 20, 393, 65, 65, 10, 10);
	c.setColor (grey);
	c.fillRoundRect (136 + 20, 396, 60, 60, 10, 10);
	//lighter roll num panel
	c.setColor (backgroundD1);
	c.fillRoundRect (193 + 60 + 25, 393, 65, 65, 10, 10);
	c.setColor (backgroundD1);
	c.fillRoundRect (263 + 90 + 25, 393, 65, 65, 10, 10);
	c.setColor (backgroundD1);
	c.fillRoundRect (333 + 120 + 25, 393, 65, 65, 10, 10);
	c.setColor (backgroundD1);
	c.fillRoundRect (403 + 150 + 25, 393, 65, 65, 10, 10);
	c.setColor (grey);
	c.fillRoundRect (196 + 60 + 25, 396, 60, 60, 10, 10);
	c.setColor (grey);
	c.fillRoundRect (266 + 90 + 25, 396, 60, 60, 10, 10);
	c.setColor (grey);
	c.fillRoundRect (336 + 120 + 25, 396, 60, 60, 10, 10);
	c.setColor (grey);
	c.fillRoundRect (406 + 150 + 25, 396, 60, 60, 10, 10);

	//pop up panel 'white panel'
	c.setColor (Color.white);
	c.fillRect (100, 90, 600, 400);

    }


    /*******************************************************************************
			  Method to show when you win the game
			  New console for showing the winning cheque
    *******************************************************************************/
    public static void Win ()
    {
	c.setColor (Color.black);
	c.drawString ("Please enter your name:", 280, 330);
	c.setCursor (18, 38);
	c.drawRect (290, 340, 240, 20);
	String name = c.readLine ();
	c.close ();                                                         //Close the 'c.' window
	x = new Console (15, 80);                                           //state new window to show the cheque
	Color Che = new Color (215, 233, 255);
	Color Chek = new Color (236, 244, 255);
	x.setColor (Che);
	x.fillRect (20, 20, 610, 270);
	x.setColor (Chek);
	x.fillRect (30, 30, 590, 250);
	Font Tet = new Font ("Times New Roman", Font.BOLD, 12);
	x.setFont (Tet);
	x.setColor (Color.black);
	x.drawString ("PAY", 80, 120);
	x.drawString ("ORDER OF", 80, 150);
	x.drawString ("$1,000,000.00", 450, 120);
	Font Tet1 = new Font ("Times New Roman", Font.PLAIN, 10);
	x.setFont (Tet1);
	x.drawString ("VANMILLION INSURANCECENTRES INC.", 390, 150);
	x.drawLine (395, 185, 580, 185);
	x.drawString ("AUTHORIZED SIGNATURE ORDER", 410, 198);
	x.drawLine (395, 185 + 50, 580, 185 + 50);
	x.drawString ("AUTHORIZED SIGNATURE RECIEVER", 400, 198 + 50);
	Font Tet11 = new Font ("Times New Roman", Font.BOLD, 15);
	x.setFont (Tet11);
	x.setColor (Color.black);
	x.drawString ("ONE MILLION", 170, 120);
	x.drawString ("PICE IS RIGHT COMPANY", 170, 150);
	x.drawString ("1000 MILLION STREET ", 170, 170);
	x.drawString ("MONEY. ONT M1M 1M1", 170, 950);

	Font Sig = new Font ("Brush Script MT", Font.BOLD, 15);
	x.setFont (Sig);
	x.drawString ("Jack.xu.price.is.right", 410, 180);
	x.drawString (name, 410, 230);                                            //entering the player name
    }



    /*********************************************************************
    **********Main Method for asking question and display****************
    ****************************play game in here************************************/
    public static void MainOperator ()
    { //background setting and form two parts (Rolling illusion and input panel)
	Color background = new Color (255, 128, 128);
	Color Textbackground = new Color (154, 154, 154);
	c.setColor (background);
	c.fillRect (15, 15, 788, 680);
	c.setTextBackgroundColor (Textbackground);
	c.setColor (Textbackground);
	c.fillRect (150, 50, 500, 200);
	Color AAA = new Color (120, 50, 0);
	c.setColor (AAA);
	c.drawLine (151, 49, 151, 249);
	c.drawLine (152, 49, 152, 249);
	c.drawLine (151, 49, 650, 49);
	c.drawLine (152, 48, 650, 48);
	c.setColor (Color.white);
	c.drawRect (150, 47, 499, 202);
	c.setColor (Color.white);
	c.drawRoundRect (145, 300, 130 + 380, 85 * 3 - 5, 10, 10);
	c.drawRoundRect (145 - 1, 300 - 1, 130 + 380 + 2, 85 * 3 + 2 - 5, 10, 10);
	c.setTextColor (Color.white);
	Diceback ();
	//Random value which is fixed after random calculation
	final int RollNum2 = (int) (Math.random () * 6) + 1;
	final int RollNum3 = (int) (Math.random () * 6) + 1;
	final int RollNum4 = (int) (Math.random () * 6) + 1;
	final int RollNum5 = (int) (Math.random () * 6) + 1;

	final int CarPrice1 = (int) (Math.random () * 6) + 1;
	final int CarPrice2 = (int) (Math.random () * 6) + 1;
	final int CarPrice3 = (int) (Math.random () * 6) + 1;
	final int CarPrice4 = (int) (Math.random () * 6) + 1;
	final int CarPrice5 = (int) (Math.random () * 6) + 1;

	//Temporary String value, it will change in later command!!
	//decision for higher or lower
	String Decide1 = "A";
	String Decide2 = "A";
	String Decide3 = "A";
	String Decide4 = "A";

	//Method drawDice temporarily Value
	int RollNum = 1;

	//Boolean statement for final decision of win or loose.
	boolean D1, D2, D3, D4; //D1 means decision 1 and D2 means decision 2 and so on
	D1 = false;
	D2 = false;
	D3 = false;
	D4 = false;
	//code
	//1st
	CarPrice (-125, +85, CarPrice1);
	c.setCursor (4, 22);
	c.setColor (Color.black);
	c.print ("Press any key to roll!");
	c.getChar ();
	DiceSound ();
	drawDice (285, 400, RollNum2);
	//method decide to show or ask higher or lower
	if (RollNum2 == CarPrice2)
	{
	    D1 = true;
	    CarPrice (0, 0, CarPrice2);
	    CarPrice (0, 85 + 85, CarPrice2);
	    Lucky (0);
	}
	else
	{
	    c.setCursor (5, 22);
	    c.print ("Is car price Higher or lower? ");
	    Decide1 = (c.readString ()).trim ();
	    c.setColor (background);
	    c.fillRect (650, 50, 150, 200);
	    while (!(Decide1.toUpperCase ().equals ("LOWER") || Decide1.toUpperCase ().equals ("HIGHER")))
	    {
		Hintingame ();
		c.setTextBackgroundColor (Textbackground);
		c.setCursor (5, 22);
		c.print ("Is car price Higher or lower? ");
		Decide1 = (c.readString ()).trim ();
		c.setColor (background);
		c.fillRect (650, 50, 150, 200);
	    }
	    drawHL (1, Decide1);
	}



	//2ND
	c.setColor (background);
	c.fillRect (650, 50, 150, 200);
	c.setColor (Color.white);
	c.drawRect (150, 47, 499, 202);
	c.setColor (Color.black);
	c.setCursor (6, 22);
	c.print ("Press any key to roll!");
	c.getChar ();
	DiceSound ();
	drawDice (385, 400, RollNum3);
	//method decide to show or ask higher or lower
	if (RollNum3 == CarPrice3)
	{
	    D2 = true;
	    CarPrice (100, 0, CarPrice3);
	    CarPrice (100, 85 + 85, CarPrice3);
	    Lucky (1);
	}
	else
	{
	    c.setCursor (7, 22);
	    c.print ("Is car price Higher or lower? ");
	    Decide2 = (c.readString ()).trim ();
	    c.setColor (background);
	    c.fillRect (650, 50, 150, 200);

	    while (!(Decide2.toUpperCase ().equals ("LOWER") || Decide2.toUpperCase ().equals ("HIGHER")))
	    {
		Hintingame ();
		c.setTextBackgroundColor (Textbackground);
		c.setCursor (7, 22);
		c.print ("Is car price Higher or lower? ");
		Decide2 = (c.readString ()).trim ();
		c.setColor (background);
		c.fillRect (650, 50, 150, 200);

	    }
	    drawHL (2, Decide2);
	}

	//3RD
	c.setColor (background);
	c.fillRect (650, 50, 150, 200);
	c.setColor (Color.white);
	c.drawRect (150, 47, 499, 202);
	c.setColor (Color.black);
	c.setCursor (8, 22);
	c.print ("Press any key to roll! ");
	c.getChar ();
	DiceSound ();
	drawDice (485, 400, RollNum4);
	//method decide to show or ask higher or lower
	if (RollNum4 == CarPrice4)
	{
	    D3 = true;
	    CarPrice (200, 0, CarPrice4);
	    CarPrice (200, 85 + 85, CarPrice4);
	    c.setColor (Color.yellow);
	    Lucky (2);
	}
	else
	{
	    c.setCursor (9, 22);
	    c.print ("Is car price Higher or lower? ");
	    Decide3 = (c.readString ()).trim ();

	    c.setColor (background);
	    c.fillRect (650, 50, 150, 200);
	    while (!(Decide3.toUpperCase ().equals ("LOWER") || Decide3.toUpperCase ().equals ("HIGHER")))
	    {
		Hintingame ();
		c.setTextBackgroundColor (Textbackground);
		c.setCursor (7, 22);
		c.setCursor (9, 22);
		c.print ("Is car price Higher or lower? ");
		Decide3 = (c.readString ()).trim ();

		c.setColor (background);
		c.fillRect (650, 50, 150, 200);
	    }
	    drawHL (3, Decide3);
	}

	//4TH
	c.setColor (background);
	c.fillRect (650, 50, 150, 200);
	c.setColor (Color.white);
	c.drawRect (150, 47, 499, 202);
	c.setColor (Color.black);
	c.setCursor (10, 22);
	c.print ("Press any key to roll! ");
	c.getChar ();
	DiceSound ();
	drawDice (585, 400, RollNum5);
	//method decide to show or ask higher or lower
	if (RollNum5 == CarPrice5)
	{
	    D4 = true;
	    CarPrice (300, 0, CarPrice5);
	    CarPrice (300, 85 + 85, CarPrice5);
	    Lucky (3);
	}
	else
	{
	    c.setCursor (11, 22);
	    c.print ("Is car price Higher or lower? ");
	    Decide4 = (c.readString ()).trim ();

	    c.setColor (background);
	    c.fillRect (650, 50, 150, 200);
	    while (!(Decide4.toUpperCase ().equals ("LOWER") || Decide4.toUpperCase ().equals ("HIGHER")))
	    {
		Hintingame ();
		c.setTextBackgroundColor (Textbackground);
		c.setCursor (7, 22);
		c.setCursor (11, 22);
		c.print ("Is car price Higher or lower? ");
		Decide4 = (c.readString ()).trim ();

		c.setColor (background);
		c.fillRect (650, 50, 150, 200);
	    }
	    drawHL (4, Decide4);
	}



	/********************************************************
	    **********************CHECKING***************************
	    **********************************************************/
	//Answer checking code
	//check 1st decide to display if right or wrong
	c.setColor (background);
	c.fillRect (650, 50, 150, 200);
	c.setColor (Textbackground);
	c.fillRect (152, 52, 498, 198);
	c.setColor (Color.white);
	c.drawRect (150, 47, 499, 202);
	if (RollNum2 < CarPrice2)
	{
	    c.setCursor (0, 0);
	    c.setColor (Textbackground);
	    c.fillRect (150, 50, 500, 200);
	    c.setCursor (4, 22);
	    c.print ("Press any Key to reveal the first answer!");
	    c.getChar ();

	    if (Decide1.toUpperCase ().equals ("HIGHER")) //it is true-higher
	    {
		D1 = true;
		c.setColor (Color.black);
		c.fillRoundRect (281, 396 - 85, 60, 60, 10, 10);
		c.setColor (Color.black);
		c.fillRoundRect (281, 396 + 85, 60, 60, 10, 10);
		CarPrice (0, 0, CarPrice2);
		c.setColor (Color.green);
		c.drawRoundRect (278, 393 - 85, 65, 65, 10, 10);
		c.drawRoundRect (279, 394 - 85, 63, 63, 10, 10);
		c.drawRoundRect (278 + 2, 393 + 2 - 85, 65 - 4, 65 - 4, 10, 10);
	    }
	    else if (Decide1.toUpperCase ().equals ("LOWER")) //it is false-lower
	    {
		CarPrice (0, 0, CarPrice2);
		c.setColor (Color.red);
		c.drawRoundRect (278, 393 + 85, 65, 65, 10, 10);
		c.drawRoundRect (279, 394 + 85, 63, 63, 10, 10);
		c.drawRoundRect (278 + 2, 393 + 2 + 85, 65 - 4, 65 - 4, 10, 10);
		c.drawRoundRect (278, 393 - 85, 65, 65, 10, 10);
		c.drawRoundRect (279, 394 - 85, 63, 63, 10, 10);
		c.drawRoundRect (278 + 2, 393 + 2 - 85, 65 - 4, 65 - 4, 10, 10);
	    }
	    else
	    {
		//error display hint********* Solved so" no else" just for ensure
	    }
	}


	else if (RollNum2 > CarPrice2)
	{
	    c.setCursor (4, 22);
	    c.print ("Press any Key to reveal the first answer!");
	    c.getChar ();
	    if (Decide1.toUpperCase ().equals ("HIGHER")) //false-higher
	    {
		CarPrice (0, 85 + 85, CarPrice2);
		c.setColor (Color.red);
		c.drawRoundRect (278, 393 - 85, 65, 65, 10, 10);
		c.drawRoundRect (279, 394 - 85, 63, 63, 10, 10);
		c.drawRoundRect (278 + 2, 393 + 2 - 85, 65 - 4, 65 - 4, 10, 10);
		c.drawRoundRect (278, 393 + 85, 65, 65, 10, 10);
		c.drawRoundRect (279, 394 + 85, 63, 63, 10, 10);
		c.drawRoundRect (278 + 2, 393 + 2 + 85, 65 - 4, 65 - 4, 10, 10);
	    }
	    else if (Decide1.toUpperCase ().equals ("LOWER")) //true-lower
	    {
		D1 = true;
		c.setColor (Color.black);
		c.fillRoundRect (281, 396 - 85, 60, 60, 10, 10);
		c.setColor (Color.black);
		c.fillRoundRect (281, 396 + 85, 60, 60, 10, 10);
		CarPrice (0, 85 + 85, CarPrice2);
		c.setColor (Color.green);
		c.drawRoundRect (278, 393 + 85, 65, 65, 10, 10);
		c.drawRoundRect (279, 394 + 85, 63, 63, 10, 10);
		c.drawRoundRect (278 + 2, 393 + 2 + 85, 65 - 4, 65 - 4, 10, 10);
	    }
	    else
	    {
		//error display hint********* Solved so" no else" just for ensure
	    }
	}


	//check 2nd decide to display if right or wrong

	if (RollNum3 < CarPrice3)
	{
	    c.setCursor (6, 22);
	    c.print ("Press any Key to reveal the second answer!");
	    c.getChar ();
	    if (Decide2.toUpperCase ().equals ("HIGHER")) //it is true-higher
	    {
		D2 = true;
		c.setColor (Color.black);
		c.fillRoundRect (266 + 90 + 25, 396 - 85, 60, 60, 10, 10);
		c.setColor (Color.black);
		c.fillRoundRect (266 + 90 + 25, 396 + 85, 60, 60, 10, 10);
		CarPrice (100, 0, CarPrice3);
		c.setColor (Color.green);
		c.drawRoundRect (278 + 100, 393 - 85, 65, 65, 10, 10);
		c.drawRoundRect (279 + 100, 394 - 85, 63, 63, 10, 10);
		c.drawRoundRect (278 + 2 + 100, 393 + 2 - 85, 65 - 4, 65 - 4, 10, 10);
	    }
	    else if (Decide2.toUpperCase ().equals ("LOWER")) //it is false-lower
	    {
		CarPrice (100, 0, CarPrice3);
		c.setColor (Color.red);
		c.drawRoundRect (278 + 100, 393 + 85, 65, 65, 10, 10);
		c.drawRoundRect (279 + 100, 394 + 85, 63, 63, 10, 10);
		c.drawRoundRect (278 + 2 + 100, 393 + 2 + 85, 65 - 4, 65 - 4, 10, 10);
		c.drawRoundRect (278 + 100, 393 - 85, 65, 65, 10, 10);
		c.drawRoundRect (279 + 100, 394 - 85, 63, 63, 10, 10);
		c.drawRoundRect (278 + 2 + 100, 393 + 2 - 85, 65 - 4, 65 - 4, 10, 10);
	    }
	    else
	    {
		///error display hint********* Solved so" no else" just for ensure
	    }
	}


	else if (RollNum3 > CarPrice3)
	{
	    c.setCursor (6, 22);
	    c.print ("Press any Key to reveal the second answer!");
	    c.getChar ();
	    if (Decide2.toUpperCase ().equals ("HIGHER")) //false-higher
	    {
		CarPrice (100, 85 + 85, CarPrice3);
		c.setColor (Color.red);
		c.drawRoundRect (278 + 100, 393 - 85, 65, 65, 10, 10);
		c.drawRoundRect (279 + 100, 394 - 85, 63, 63, 10, 10);
		c.drawRoundRect (278 + 2 + 100, 393 + 2 - 85, 65 - 4, 65 - 4, 10, 10);
		c.drawRoundRect (278 + 100, 393 + 85, 65, 65, 10, 10);
		c.drawRoundRect (279 + 100, 394 + 85, 63, 63, 10, 10);
		c.drawRoundRect (278 + 2 + 100, 393 + 2 + 85, 65 - 4, 65 - 4, 10, 10);
	    }
	    else if (Decide2.toUpperCase ().equals ("LOWER")) //true-lower
	    {
		D2 = true;
		c.setColor (Color.black);
		c.fillRoundRect (266 + 90 + 25, 396 - 85, 60, 60, 10, 10);
		c.setColor (Color.black);
		c.fillRoundRect (266 + 90 + 25, 396 + 85, 60, 60, 10, 10);
		CarPrice (100, 85 + 85, CarPrice3);
		c.setColor (Color.green);
		c.drawRoundRect (278 + 100, 393 + 85, 65, 65, 10, 10);
		c.drawRoundRect (279 + 100, 394 + 85, 63, 63, 10, 10);
		c.drawRoundRect (278 + 2 + 100, 393 + 2 + 85, 65 - 4, 65 - 4, 10, 10);
	    }
	    else
	    {
		//error display hint********* Solved so" no else" just for ensure
	    }
	}


	//check 3rd decide to display if right or wrong

	if (RollNum4 < CarPrice4)
	{
	    c.setCursor (8, 22);
	    c.print ("Press any Key to reveal the third answer!");
	    c.getChar ();
	    if (Decide3.toUpperCase ().equals ("HIGHER")) //it is true-higher
	    {
		D3 = true;
		c.setColor (Color.black);
		c.fillRoundRect (336 + 120 + 25, 396 - 85, 60, 60, 10, 10);
		c.setColor (Color.black);
		c.fillRoundRect (336 + 120 + 25, 396 + 85, 60, 60, 10, 10);

		CarPrice (200, 0, CarPrice4);
		c.setColor (Color.green);
		c.drawRoundRect (278 + 200, 393 - 85, 65, 65, 10, 10);
		c.drawRoundRect (279 + 200, 394 - 85, 63, 63, 10, 10);
		c.drawRoundRect (278 + 2 + 200, 393 + 2 - 85, 65 - 4, 65 - 4, 10, 10);
	    }
	    else if (Decide3.toUpperCase ().equals ("LOWER")) //it is false-lower
	    {
		CarPrice (200, 0, CarPrice4);
		c.setColor (Color.red);
		c.drawRoundRect (278 + 200, 393 + 85, 65, 65, 10, 10);
		c.drawRoundRect (279 + 200, 394 + 85, 63, 63, 10, 10);
		c.drawRoundRect (278 + 2 + 200, 393 + 2 + 85, 65 - 4, 65 - 4, 10, 10);
		c.drawRoundRect (278 + 200, 393 - 85, 65, 65, 10, 10);
		c.drawRoundRect (279 + 200, 394 - 85, 63, 63, 10, 10);
		c.drawRoundRect (278 + 2 + 200, 393 + 2 - 85, 65 - 4, 65 - 4, 10, 10);
	    }
	    else
	    {
		//error display hint********* Solved so" no else" just for ensure
	    }
	}



	else if (RollNum4 > CarPrice4)
	{
	    c.setCursor (8, 22);
	    c.print ("Press any Key to reveal the third answer!");
	    c.getChar ();
	    if (Decide3.toUpperCase ().equals ("HIGHER")) //false-higher
	    {
		CarPrice (200, 85 + 85, CarPrice4);
		c.setColor (Color.red);
		c.drawRoundRect (278 + 200, 393 - 85, 65, 65, 10, 10);
		c.drawRoundRect (279 + 200, 394 - 85, 63, 63, 10, 10);
		c.drawRoundRect (278 + 2 + 200, 393 + 2 - 85, 65 - 4, 65 - 4, 10, 10);
		c.drawRoundRect (278 + 200, 393 + 85, 65, 65, 10, 10);
		c.drawRoundRect (279 + 200, 394 + 85, 63, 63, 10, 10);
		c.drawRoundRect (278 + 2 + 200, 393 + 2 + 85, 65 - 4, 65 - 4, 10, 10);
	    }
	    else if (Decide3.toUpperCase ().equals ("LOWER")) //true-lower
	    {
		D3 = true;
		c.setColor (Color.black);
		c.fillRoundRect (336 + 120 + 25, 396 - 85, 60, 60, 10, 10);
		c.setColor (Color.black);
		c.fillRoundRect (336 + 120 + 25, 396 + 85, 60, 60, 10, 10);

		CarPrice (200, 85 + 85, CarPrice4);
		c.setColor (Color.green);
		c.drawRoundRect (278 + 200, 393 + 85, 65, 65, 10, 10);
		c.drawRoundRect (279 + 200, 394 + 85, 63, 63, 10, 10);
		c.drawRoundRect (278 + 2 + 200, 393 + 2 + 85, 65 - 4, 65 - 4, 10, 10);
	    }
	    else
	    {
		//error display hint********* Solved so" no else" just for ensure
	    }
	}


	//check 4th decide to display if right or wrong

	if (RollNum5 < CarPrice5)
	{
	    c.setCursor (10, 22);
	    c.print ("Press any Key to reveal the fourth answer!");
	    c.getChar ();
	    if (Decide4.toUpperCase ().equals ("HIGHER")) //it is true-higher
	    {
		D4 = true;
		c.setColor (Color.black);
		c.fillRoundRect (406 + 150 + 25, 396 - 85, 60, 60, 10, 10);
		c.setColor (Color.black);
		c.fillRoundRect (406 + 150 + 25, 396 + 85, 60, 60, 10, 10);
		CarPrice (300, 0, CarPrice5);
		c.setColor (Color.green);
		c.drawRoundRect (278 + 300, 393 - 85, 65, 65, 10, 10);
		c.drawRoundRect (279 + 300, 394 - 85, 63, 63, 10, 10);
		c.drawRoundRect (278 + 2 + 300, 393 + 2 - 85, 65 - 4, 65 - 4, 10, 10);
	    }
	    else if (Decide4.toUpperCase ().equals ("LOWER")) //it is false-lower
	    {
		CarPrice (300, 0, CarPrice5);
		c.setColor (Color.red);
		c.drawRoundRect (278 + 300, 393 + 85, 65, 65, 10, 10);
		c.drawRoundRect (279 + 300, 394 + 85, 63, 63, 10, 10);
		c.drawRoundRect (278 + 2 + 300, 393 + 2 + 85, 65 - 4, 65 - 4, 10, 10);
		c.drawRoundRect (278 + 300, 393 - 85, 65, 65, 10, 10);
		c.drawRoundRect (279 + 300, 394 - 85, 63, 63, 10, 10);
		c.drawRoundRect (278 + 2 + 300, 393 + 2 - 85, 65 - 4, 65 - 4, 10, 10);
	    }
	    else
	    {
		//error display hint********* Solved so" no else" just for ensure
	    }
	}


	else if (RollNum5 > CarPrice5)
	{
	    c.setCursor (10, 22);
	    c.print ("Press any Key to reveal the fourth answer!");
	    c.getChar ();
	    if (Decide4.toUpperCase ().equals ("HIGHER")) //false-higher
	    {
		CarPrice (300, 85 + 85, CarPrice5);
		c.setColor (Color.red);
		c.drawRoundRect (278 + 300, 393 - 85, 65, 65, 10, 10);
		c.drawRoundRect (279 + 300, 394 - 85, 63, 63, 10, 10);
		c.drawRoundRect (278 + 2 + 300, 393 + 2 - 85, 65 - 4, 65 - 4, 10, 10);
		c.drawRoundRect (278 + 300, 393 + 85, 65, 65, 10, 10);
		c.drawRoundRect (279 + 300, 394 + 85, 63, 63, 10, 10);
		c.drawRoundRect (278 + 2 + 300, 393 + 2 + 85, 65 - 4, 65 - 4, 10, 10);
	    }
	    else if (Decide4.toUpperCase ().equals ("LOWER")) //true-lower
	    {
		D4 = true;
		c.setColor (Color.black);
		c.fillRoundRect (406 + 150 + 25, 396 - 85, 60, 60, 10, 10);
		c.setColor (Color.black);
		c.fillRoundRect (406 + 150 + 25, 396 + 85, 60, 60, 10, 10);
		CarPrice (300, 85 + 85, CarPrice5);
		c.setColor (Color.green);
		c.drawRoundRect (278 + 300, 393 + 85, 65, 65, 10, 10);
		c.drawRoundRect (279 + 300, 394 + 85, 63, 63, 10, 10);
		c.drawRoundRect (278 + 2 + 300, 393 + 2 + 85, 65 - 4, 65 - 4, 10, 10);
	    }
	    else
	    {
		//error display hint********* Solved so" no else" just for ensure
	    }
	}



	// following is part for end the dice game to see results win or lose

	c.setCursor (4, 22);
	c.print ("Press any key to get results!!");
	c.getChar ();
	if (D1 && D2 && D3 && D4) //if all right, player win
	{
	    Pompup ();

	    Font Title = new Font ("Showcard Gothic", Font.PLAIN, 55);
	    c.setFont (Title);
	    c.setColor (Color.red);
	    c.drawString ("You win", 280, 170);
	    c.setColor (Color.black);
	    c.drawLine (180, 180, 620, 180);
	    c.drawString ("$1,000,000.00", 230, 270);
	    WinSound ();
	    int num = 10;
	    for (int i = 0 ; i < num ; i++)
	    {
		c.setColor (Color.black);
		c.drawString ("You win", 280, 170);
		c.setColor (Color.red);
		c.drawString ("$1,000,000.00", 230, 270);
		c.setColor (Color.white);
		c.drawRect (100, 90, 600, 400);
		c.drawRect (99, 89, 602, 402);
		delay (0.1);

		c.setColor (Color.red);
		c.drawString ("You win", 280, 170);
		c.setColor (Color.black);
		c.drawString ("$1,000,000.00", 230, 270);
		c.setColor (Color.yellow);
		c.drawRect (100, 90, 600, 400);
		c.drawRect (99, 89, 602, 402);
		delay (0.1);
	    }
	    Font Title2 = new Font ("Showcard Gothic", Font.PLAIN, 20);
	    c.setFont (Title2);
	    c.setTextBackgroundColor (Color.white);
	    c.setTextColor (Color.black);
	    Win ();

	}


	else //if else is wrong if not all right, player lose
	{
	    Pompup ();
	    LoseSound ();
	    Font Title = new Font ("Showcard Gothic", Font.PLAIN, 55);
	    c.setFont (Title);
	    c.setColor (Color.yellow);
	    c.drawRect (100, 90, 600, 400);
	    c.setColor (Color.red);
	    c.drawString ("You Lose", 280, 170);
	    c.setColor (Color.black);
	    c.drawLine (180, 180, 620, 180);
	    c.drawString ("$ 0", 360, 270);
	    c.drawRoundRect (250, 300, 330, 60, 10, 10);
	    c.drawString ("Play Again", 260, 350);
	    c.drawRoundRect (320, 300 + 80, 200, 60, 10, 10);
	    c.drawString ("Quit", 350, 430);
	    c.setTextBackgroundColor (Color.white);
	    c.setTextColor (Color.black);
	    c.setCursor (18, 68);
	    c.print ("(p)");
	    c.setCursor (22, 59);
	    c.print ("(q)");

	    c.drawRoundRect (320, 300 + 150, 200, 30, 10, 10);
	    Font Title1 = new Font ("Showcard Gothic", Font.PLAIN, 20);
	    c.setFont (Title1);
	    c.drawString ("Bck to Menu", 350, 475);
	    c.setCursor (24, 60);
	    c.print ("(m)");
	    char command4 = c.getChar ();
	    if ((int) command4 == 80 || (int) command4 == 112)
	    {
		MainOperator ();
	    }
	    else if ((int) command4 == 109 || (int) command4 == 77)
	    {
		menu ();
	    }
	    else if ((int) command4 == 113 || (int) command4 == 81)
	    {
		c.close ();
	    }
	    else
	    {
		Command4 ();
	    }
	}
    }


    //loop method for repeat cheking if get any proper keys to run program
    public static void Command4 ()
    {
	char command4 = c.getChar ();
	if ((int) command4 == 80 || (int) command4 == 112) //key 'p'
	{
	    MainOperator ();
	}


	else if ((int) command4 == 109 || (int) command4 == 77) //key 'm'
	{
	    menu ();
	}


	else if ((int) command4 == 113 || (int) command4 == 81) //key 'q'
	{
	    c.close ();
	}


	else                                     //other keys to repeat seaking for proper commands
	{
	    Command4 ();
	}
    }


    /********************************draw bigbig dice!!! for background*******************************/
    public static void drawDice3D1 (int x, int y)
    {
	Color CC = new Color (186, 135, 135);
	//shadow
	c.setColor (CC);
	int[] a = {x + 160, 536 + x, 536 + x, x + 300};
	int[] b = {y + 280, y + 240, y + 150, y + 130};
	c.fillPolygon (a, b, 4);
	//shadow

	c.setColor (Color.white);
	int[] q = {x, x, x + 160, x + 300, 300 + x, 140 + x};
	int[] w = {y, y + 200, y + 280, y + 180, y - 10, y - 60};
	c.fillPolygon (q, w, 6);

	Color QQ = new Color (180, 180, 180);
	c.setColor (QQ);
	int[] o = {x + 160, x + 160, x + 300, x + 300};
	int[] p = {y + 60, y + 280, y + 180, y - 10};
	c.fillPolygon (o, p, 4);

	c.setColor (Color.black);
	c.drawPolygon (q, w, 6);

	c.drawLine (x + 160, y + 60, x + 160, y + 280);
	c.drawLine (x, y, x + 160, y + 60);
	c.drawLine (x + 160, y + 60, 300 + x, y - 10);
	//Dice Surface

	c.fillOval (x + 40, y - 12, 45, 22);
	c.drawArc (x + 40, y - 15, 45, 22, 0, 180);
	c.fillOval (x + 125, y - 42, 42, 20);
	c.drawArc (x + 123, y - 45, 45, 22, 0, 180);
	c.fillOval (x + 215, y - 15, 45, 22);
	c.drawArc (x + 215, y - 17, 45, 22, 0, 180);
	c.fillOval (x + 135, y + 20, 48, 22);
	c.drawArc (x + 137, y + 17, 45, 22, 0, 180);
	//top surface (4)
	c.fillOval (x + 20, y + 30, 27, 45);
	c.drawArc (x + 17, y + 27, 27, 45, 60, 150);
	c.fillOval (x + 20, y + 155, 27, 45);
	c.drawArc (x + 17, y + 152, 27, 45, 60, 150);
	c.fillOval (x + 120, y + 70, 28, 50);
	c.drawArc (x + 117, y + 67, 28, 50, 60, 150);
	c.fillOval (x + 120, y + 198, 28, 50);
	c.drawArc (x + 117, y + 195, 28, 50, 60, 150);
	c.fillOval (x + 70, y + 110, 28, 48);
	c.drawArc (x + 67, y + 107, 28, 48, 60, 150);
	//right (5)
	c.fillOval (x + 170, y + 68, 30, 50);
	c.drawArc (x + 172, y + 70, 30, 50, 270, 120);
	c.fillOval (x + 170, y + 128, 30, 50);
	c.drawArc (x + 172, y + 130, 30, 50, 270, 120);
	c.fillOval (x + 170, y + 190, 30, 50);
	c.drawArc (x + 172, y + 192, 30, 50, 270, 120);

	c.fillOval (x + 260, y + 20, 28, 48);
	c.drawArc (x + 262, y + 22, 28, 48, 270, 110);
	c.fillOval (x + 260, y + 78, 28, 48);
	c.drawArc (x + 262, y + 80, 28, 48, 270, 110);
	c.fillOval (x + 260, y + 140, 28, 48);
	c.drawArc (x + 262, y + 142, 28, 48, 270, 110);
    }


    /**************************Cover yes cover***********************************/

    public static void Cover ()
    {
	//c.drawRect(16,150,943,400);

	//background
	Color aa = new Color (255, 128, 128);
	c.setColor (aa);
	c.fillRect (16, 16, 944, 680);
	//Back ground

	drawDice3D1 (500, 160);
	drawDice3D1 (400, 300);
	int a = 40;
	int b = 50;

	Font Title = new Font ("Showcard Gothic", Font.PLAIN, 90);
	c.setFont (Title);
	c.drawRoundRect (20 + a, 20 + b, 90, 90, 10, 10);
	c.drawString ("D", 35 + a, 100 + b);
	c.drawRoundRect (120 + a, 20 + b + 50, 90, 90, 10, 10);
	c.drawString ("I", 150 + a, 100 + b + 50);
	c.drawRoundRect (220 + a, 20 + b, 90, 90, 10, 10);
	c.drawString ("C", 235 + a, 100 + b);
	c.drawRoundRect (320 + a, 20 + b + 50, 90, 90, 10, 10);
	c.drawString ("E", 340 + a, 100 + b + 50);

	Font Titleq = new Font ("Colonna MT", Font.PLAIN, 90);
	c.setFont (Titleq);
	c.drawString ("GAME", 70 + a, b + 300);

	Font Titleqa = new Font ("Time New Romen", Font.PLAIN, 15);
	c.setFont (Titleqa);
	c.drawString ("**Press any key to continue!!", 10 + a, b + 350);
	c.drawString ("**Key introduce(except when asking for press any key)", 10 + a, b + 370);
	c.drawString ("  'p' = play ;  'q' = quit ; 'm' = menu ;", 10 + a, b + 385);
	c.drawString ("  'n' = next page ;  'b' = back to previous page.", 10 + a, b + 400);
	c.drawString ("**All right reserved in Price Is My Right INC:", 10 + a, b + 430);
	c.drawString ("Programer: Jack Xu          Date: 22/04/2015", 35 + a, b + 460);
	c.drawString ("*This program will let you enjoy a dice destiny game.", 10 + a, b + 490);
	c.drawString ("*You are supposed to roll a dice against the random car price", 10 + a, b + 510);
	c.drawString ("*If you get four answers all right, you will get 1 million!!!", 10 + a, b + 530);
	c.getChar ();
	menu ();
    }


    /******************Menu after cover to go to intro or cover or play or quit*******************/
    public static void menu ()
    {


	CoverPanel ();

	//
	c.setColor (Color.white);
	c.fillRoundRect (250, 130, 300, 400, 20, 20);
	c.setColor (Color.yellow);
	c.drawRoundRect (250, 130, 300, 400, 20, 20);
	c.drawRoundRect (249, 129, 302, 402, 20, 20);
	//
	Font Titleq1 = new Font ("Colonna MT", Font.PLAIN, 40);
	c.setFont (Titleq1);
	c.setColor (Color.black);
	c.drawString (" M E N U", 310, 200);
	c.drawLine (315, 215, 480, 215);

	Font Titleq1a = new Font ("Times New Roman", Font.PLAIN, 30);
	c.setFont (Titleq1a);
	c.setCursor (20, 55);
	c.print ("(p)");
	c.drawString ("PLAY", 365, 400 - 10);
	c.drawRoundRect (340, 383 - 30, 120, 50, 30, 30);

	c.setCursor (16, 56);
	c.print ("(i)");
	c.drawString ("INTRO", 355, 320 - 10);
	c.drawRoundRect (340 - 10, 283 - 10, 120 + 10 + 10, 50, 30, 30);

	Font Title1 = new Font ("Times New Roman", Font.PLAIN, 20);
	c.drawRoundRect (320, 300 + 150, 180, 30, 10, 10);
	c.setFont (Title1);
	c.drawString ("Back to Cover", 350, 475);
	c.setCursor (24, 60);
	c.print ("(b)");
	c.drawRoundRect (370, 300 + 190, 80, 30, 10, 10);
	c.drawString ("Quit", 380, 515);
	c.setCursor (26, 53);
	c.print ("(q)");


	char aa = c.getChar ();

	if ((int) aa == 105 || (int) aa == 73) //key 'i' to introduction
	{
	    Intro ();
	}


	else if ((int) aa == 112 || (int) aa == 80) //key 'p' to play
	{
	    MainOperator ();
	}


	else if ((int) aa == 98 || (int) aa == 66) //key 'b' to cover
	{
	    Cover ();
	}


	else if ((int) aa == 113 || (int) aa == 81) //key 'q' for quitting
	{
	    c.close ();
	}


	else
	{
	    command ();
	}
    }


    /***********************************for looping seeking the keys
    are the same as above command 2*******************************/
    public static void command ()
    {
	char aa = c.getChar ();

	if ((int) aa == 105 || (int) aa == 73)
	{
	    Intro ();
	}


	else if ((int) aa == 112 || (int) aa == 80)
	{
	    MainOperator ();
	}


	else if ((int) aa == 98 || (int) aa == 66)
	{
	    Cover ();
	}


	else if ((int) aa == 113 || (int) aa == 81)
	{
	    c.close ();
	}


	else
	{
	    command ();
	}
    }


    /*************Cover panel the background for intro*********************************/

    public static void CoverPanel ()
    {
	//background
	Color aa = new Color (255, 190, 190);
	Color bb = new Color (100, 100, 100);
	c.setColor (aa);
	c.fillRect (16, 16, 944, 680);
	//Back ground

	drawDice3D (500, 160);
	drawDice3D (400, 300);
	int a = 40;
	int b = 50;
	Font Title = new Font ("Showcard Gothic", Font.PLAIN, 90);
	c.setFont (Title);
	c.setColor (bb);
	c.drawRoundRect (20 + a, 20 + b, 90, 90, 10, 10);
	c.drawString ("D", 35 + a, 100 + b);
	c.drawRoundRect (120 + a, 20 + b + 50, 90, 90, 10, 10);
	c.drawString ("I", 150 + a, 100 + b + 50);
	c.drawRoundRect (220 + a, 20 + b, 90, 90, 10, 10);
	c.drawString ("C", 235 + a, 100 + b);
	c.drawRoundRect (320 + a, 20 + b + 50, 90, 90, 10, 10);
	c.drawString ("E", 340 + a, 100 + b + 50);

	Font Titleq = new Font ("Colonna MT", Font.PLAIN, 90);
	c.setFont (Titleq);
	c.drawString ("GAME", 70 + a, b + 300);

	Font Titleqa = new Font ("Time New Romen", Font.PLAIN, 15);
	c.setFont (Titleqa);
	c.drawString ("**Press any key to continue!!", 50 + a, b + 400);
	c.drawString ("**All right reserved in Price Is Right INC.", 50 + a, b + 430);
	//
    }


    //*******lighter background for dice
    public static void drawDice3D (int x, int y)
    {
	Color bb = new Color (80, 80, 80);
	Color CC = new Color (186, 165, 165);
	//shadow
	c.setColor (CC);
	int[] a = {x + 160, 536 + x, 536 + x, x + 300};
	int[] b = {y + 280, y + 240, y + 150, y + 130};
	c.fillPolygon (a, b, 4);
	//shadow

	c.setColor (Color.white);
	int[] q = {x, x, x + 160, x + 300, 300 + x, 140 + x};
	int[] w = {y, y + 200, y + 280, y + 180, y - 10, y - 60};
	c.fillPolygon (q, w, 6);

	Color QQ = new Color (180, 180, 180);
	c.setColor (QQ);
	int[] o = {x + 160, x + 160, x + 300, x + 300};
	int[] p = {y + 60, y + 280, y + 180, y - 10};
	c.fillPolygon (o, p, 4);

	c.setColor (bb);
	c.drawPolygon (q, w, 6);

	c.drawLine (x + 160, y + 60, x + 160, y + 280);
	c.drawLine (x, y, x + 160, y + 60);
	c.drawLine (x + 160, y + 60, 300 + x, y - 10);
	//Dice Surface

	c.fillOval (x + 40, y - 12, 45, 22);
	c.drawArc (x + 40, y - 15, 45, 22, 0, 180);
	c.fillOval (x + 125, y - 42, 42, 20);
	c.drawArc (x + 123, y - 45, 45, 22, 0, 180);
	c.fillOval (x + 215, y - 15, 45, 22);
	c.drawArc (x + 215, y - 17, 45, 22, 0, 180);
	c.fillOval (x + 135, y + 20, 48, 22);
	c.drawArc (x + 137, y + 17, 45, 22, 0, 180);
	//top surface (4)
	c.fillOval (x + 20, y + 30, 27, 45);
	c.drawArc (x + 17, y + 27, 27, 45, 60, 150);
	c.fillOval (x + 20, y + 155, 27, 45);
	c.drawArc (x + 17, y + 152, 27, 45, 60, 150);
	c.fillOval (x + 120, y + 70, 28, 50);
	c.drawArc (x + 117, y + 67, 28, 50, 60, 150);
	c.fillOval (x + 120, y + 198, 28, 50);
	c.drawArc (x + 117, y + 195, 28, 50, 60, 150);
	c.fillOval (x + 70, y + 110, 28, 48);
	c.drawArc (x + 67, y + 107, 28, 48, 60, 150);
	//right (5)
	c.fillOval (x + 170, y + 68, 30, 50);
	c.drawArc (x + 172, y + 70, 30, 50, 270, 120);
	c.fillOval (x + 170, y + 128, 30, 50);
	c.drawArc (x + 172, y + 130, 30, 50, 270, 120);
	c.fillOval (x + 170, y + 190, 30, 50);
	c.drawArc (x + 172, y + 192, 30, 50, 270, 120);

	c.fillOval (x + 260, y + 20, 28, 48);
	c.drawArc (x + 262, y + 22, 28, 48, 270, 110);
	c.fillOval (x + 260, y + 78, 28, 48);
	c.drawArc (x + 262, y + 80, 28, 48, 270, 110);
	c.fillOval (x + 260, y + 140, 28, 48);
	c.drawArc (x + 262, y + 142, 28, 48, 270, 110);
    }


    ///quote for introduction panel
    public static void Intro ()
    {
	Coverlight ();
	//
	c.setColor (Color.white);
	c.fillRoundRect (250, 130, 300, 400, 20, 20);
	c.setColor (Color.yellow);
	c.drawRoundRect (250, 130, 300, 400, 20, 20);
	c.drawRoundRect (249, 129, 302, 402, 20, 20);
	//
	Font Titleq1 = new Font ("Colonna MT", Font.PLAIN, 40);
	c.setFont (Titleq1);
	c.setColor (Color.black);
	c.drawString (" M E N U", 310, 200);
	c.drawLine (315, 215, 480, 215);
	Font Titleq1a = new Font ("Colonna MT", Font.PLAIN, 30);
	c.setFont (Titleq1a);
	c.setCursor (17, 57);
	c.print ("(i)");
	c.setCursor (22, 55);
	c.print ("(p)");
	c.drawString ("INTRO", 355, 320 + 10);
	c.drawRoundRect (340 - 10, 283 + 10, 120 + 20, 50, 30, 30);

	c.drawString ("PLAY", 365, 420 + 10);
	c.drawRoundRect (340, 383 + 10, 120, 50, 30, 30);
	//
	Coverlight ();
	c.setColor (Color.white);
	c.fillRect (0, 0, 800, 50);
	c.fillRect (0, 560, 800, 50);
	c.fillRect (0, 0, 50, 560);
	c.fillRect (750, 0, 50, 560);
	c.fillRect (150, 100, 500, 410);
	c.setColor (Color.black);
	Font Intro = new Font ("Arial Black", Font.PLAIN, 40);
	c.setFont (Intro);
	c.drawString ("Introduction", 250, 45);
	c.setCursor (6, 38);
	c.print ("Welcome to my Dice game");
	c.setCursor (8, 25);
	c.print ("Here, I am going to briefly introduce my Dice game.");
	c.setCursor (9, 25);
	c.print ("Car Price is a computer generated value");
	c.setCursor (10, 23);
	c.print ("After returning the menu (Press 'm' to go back to menu),");
	c.setCursor (11, 20);
	c.print ("\t\tPress 'p' to enter the game panel.");
	c.setCursor (12, 23);
	c.print ("1. In the game panel, you will see a grey board, please ");

	c.setCursor (13, 23);
	c.print ("follow the command appeared from that board. ");
	c.setCursor (14, 23);
	c.print ("2. Press any key to enter = please press any key on your ");
	c.setCursor (15, 23);
	c.print ("key board (Only one), Then the program will help to roll.");
	c.setCursor (16, 23);
	c.print ("3. In the bottom panel, there will appear the dice rolled.");
	c.setCursor (17, 23);
	c.print ("If your dice number is exactly same as the Price that ");
	c.setCursor (18, 23);
	c.print ("computer generated in same digit places, so Congradulation!");
	c.setCursor (19, 23);
	c.print ("You will see the number appearing from the bottom part of ");
	c.setCursor (20, 23);
	c.print ("panel above and below the dice you rolled.");
	c.setCursor (21, 23);
	c.print ("4. Otherwise, if the number you rolled is not same as the ");
	c.setCursor (22, 23);
	c.print ("number that computer generated, it will ask you to enter");
	c.setCursor (23, 23);
	c.print ("if the Generated price is higher or lower than your dice.");
	c.setCursor (25, 33);
	c.print ("Back to Menu(M/B)");
	c.setCursor (25, 59);
	c.print ("Next Page(N)");
	int[] s = {200, 250, 250};
	int[] ss = {490, 480, 500};
	c.drawPolygon (s, ss, 3);
	int[] s1 = {560, 560, 610};
	int[] ss1 = {500, 480, 490};
	c.drawPolygon (s1, ss1, 3);

	char intr = c.getChar ();

	if ((int) intr == 109 || (int) intr == 77)
	{
	    menu ();
	}


	else if ((int) intr == 110 || (int) intr == 78)
	{
	    Page2 ();
	}


	if ((int) intr == 66 || (int) intr == 98)
	{
	    menu ();
	}


	else
	{
	    command2 ();
	}




    } // main method


    //page 2 intro duction
    public static void Page2 ()
    {
	//next
	c.setColor (Color.white);
	c.fillRect (150, 100, 500, 410);
	c.setColor (Color.black);
	c.setCursor (6, 38);
	c.print (" Welcome to my Dice game");
	c.setCursor (8, 20);
	c.print (" 5. In answer, you need to type 'higher' or 'lower' according");
	c.setCursor (9, 20);
	c.print (" to your decision. After typing answers, press enter to hand");
	c.setCursor (10, 20);
	c.print (" in the answer, then you will meet next hint of rolling dies");
	c.setCursor (11, 20);
	c.print (" again.");
	c.setCursor (12, 20);
	c.print (" 6. After rolling dice four times, and you can preaa any key");

	c.setCursor (13, 20);
	c.print (" to check if you will get any presents or win the game.");
	c.setCursor (14, 20);
	c.print (" 7. If you roll four times the same values or guess rest dices");
	c.setCursor (15, 20);
	c.print (" higher or lower right, you can win Million dollars!!");
	c.setCursor (17, 20);
	c.print (" All in all, Good luck!!");
	c.setCursor (25, 33);
	c.print ("Back to Previous(B)");
	c.setCursor (25, 62);
	c.print ("Play(P)");
	int[] s = {200, 250, 250};
	int[] ss = {490, 480, 500};
	c.drawPolygon (s, ss, 3);
	int[] s1 = {560, 560, 610};
	int[] ss1 = {500, 480, 490};
	c.drawPolygon (s1, ss1, 3);
	char intr = c.getChar ();

	if ((int) intr == 66 || (int) intr == 98)
	{
	    Intro ();
	}


	else if ((int) intr == 112 || (int) intr == 80)
	{
	    MainOperator ();
	}


	else
	{
	    command3 ();
	}
    }


    //loop for seeking key enters to operate
    public static void command2 ()
    {
	char intr = c.getChar ();

	if ((int) intr == 109 || (int) intr == 77)
	{
	    menu ();
	}


	else if ((int) intr == 110 || (int) intr == 78)
	{
	    Page2 ();
	}


	if ((int) intr == 66 || (int) intr == 98)
	{
	    menu ();
	}


	else
	{
	    command2 ();
	}
    }


    //loop for seeking key enters to operate

    public static void command3 ()
    {
	char intr = c.getChar ();

	if ((int) intr == 66 || (int) intr == 98)
	{
	    Intro ();
	}


	else if ((int) intr == 112 || (int) intr == 80)
	{
	    MainOperator ();
	}


	else
	{
	    command3 ();
	}
    }


    //cover lighter for back ground
    public static void Coverlight ()
    {
	//background
	Color aa = new Color (255, 190, 190);
	Color bb = new Color (100, 100, 100);
	c.setColor (aa);
	c.fillRect (16, 16, 944, 680);
	//Back ground

	drawDice3D (500, 160);
	drawDice3D (400, 300);
	int a = 40;
	int b = 50;
	Font Title = new Font ("Showcard Gothic", Font.PLAIN, 90);
	c.setFont (Title);
	c.setColor (bb);
	c.drawRoundRect (20 + a, 20 + b, 90, 90, 10, 10);
	c.drawString ("D", 35 + a, 100 + b);
	c.drawRoundRect (120 + a, 20 + b + 50, 90, 90, 10, 10);
	c.drawString ("I", 150 + a, 100 + b + 50);
	c.drawRoundRect (220 + a, 20 + b, 90, 90, 10, 10);
	c.drawString ("C", 235 + a, 100 + b);
	c.drawRoundRect (320 + a, 20 + b + 50, 90, 90, 10, 10);
	c.drawString ("E", 340 + a, 100 + b + 50);

	Font Titleq = new Font ("Colonna MT", Font.PLAIN, 90);
	c.setFont (Titleq);
	c.drawString ("GAME", 70 + a, b + 300);

	Font Titleqa = new Font ("Time New Romen", Font.PLAIN, 15);
	c.setFont (Titleqa);
	c.drawString ("**Press any key to continue!!", 50 + a, b + 400);
	c.drawString ("**All right reserved in Price Is Right INC.", 50 + a, b + 430);
	//
    }
} // Dicegame class


